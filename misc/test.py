import importlib.metadata
import sys
import os
import pkg_resources # Alternative for older Python/setuptools

# --- Option 1: Using pipreqs (Recommended for accuracy) ---
# Install: pip install pipreqs
# Usage (run in your terminal in the project root directory):
# pipreqs . --force  # The '.' means current directory, --force overwrites existing requirements.txt
#
# This tool scans your .py files for imports and generates requirements.
# It's generally better at catching dependencies than the manual script below.
#
print("--- Recommended Method: Using pipreqs ---")
print("1. Install pipreqs: pip install pipreqs")
print(f"2. Navigate to your project directory in the terminal: cd /path/to/your/project")
print(f"3. Run: pipreqs . --force")
print("-" * 40)
print("\n--- Manual Script for Core Libraries ---")
print("This script lists versions for explicitly defined libraries.")
print("It might miss indirect dependencies. Use pipreqs for better coverage.")
print("-" * 40)


# --- Option 2: Manual Script for Specific Libraries ---
# List the core libraries you know you are using
# Add any others essential for your project (e.g., specific hardware libraries if used)
core_libraries = [
    'torch',
    'transformers',
    'peft',
    'streamlit',
    'accelerate',    # Often needed by transformers/peft, especially for device_map
    'bitsandbytes',  # Needed for 4-bit loading
    'sentencepiece', # Often a tokenizer dependency
    'protobuf'       # Sometimes a dependency
    # Add other direct dependencies if you have them
]

requirements = []
not_found = []

print("Checking versions:")
for lib in core_libraries:
    try:
        # Method 1: importlib.metadata (Python 3.8+) - Preferred
        version = importlib.metadata.version(lib)
        print(f"- Found {lib}=={version}")
        requirements.append(f"{lib}=={version}")
    except importlib.metadata.PackageNotFoundError:
        try:
            # Method 2: pkg_resources (Older Python/setuptools) - Fallback
            version = pkg_resources.get_distribution(lib).version
            print(f"- Found {lib}=={version} (using pkg_resources)")
            requirements.append(f"{lib}=={version}")
        except pkg_resources.DistributionNotFound:
            print(f"- {lib} not found in environment.")
            not_found.append(lib)
    except Exception as e:
         print(f"- Error checking {lib}: {e}")
         not_found.append(f"{lib} (Error: {e})")


print("\n" + "-" * 40)
print("Generated Requirements Lines (copy to requirements.txt):")
print("-" * 40)
for req in requirements:
    print(req)

if not_found:
    print("\n" + "-" * 40)
    print("Libraries not found or errors occurred:")
    print("-" * 40)
    for lib in not_found:
        print(f"- {lib}")
    print("\nMake sure these libraries are installed in your environment (`pip install ...`)")

print("\n" + "-" * 40)
print("To save these lines automatically (excluding not found/errors):")
output_filename = "requirements_generated.txt"
with open(output_filename, "w") as f:
     f.write("# Generated by generate_reqs.py\n")
     f.write("# Consider using 'pipreqs .' for more accuracy\n\n")
     for req in requirements:
         f.write(req + "\n")
print(f"Output saved to: {output_filename}")
print("You should review this file and potentially merge it with output from 'pipreqs'.")